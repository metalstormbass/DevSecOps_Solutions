name: "My First Pipeline"

on:
  push:
    branches:
    - main

jobs:
  Pipeline-Job:
    name: 'My First Pipeline Job'
    runs-on: ubuntu-latest
    env:
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZ_RG: ${{ secrets.AZ_RG }}
      K8_CLUSTERNAME: ${{ secrets.K8_CLUSTERNAME }}
      K8_DEPLOYMENT: ${{ secrets.K8_DEPLOYMENT }}
      K8_NAMESPACE: ${{ secrets.K8_NAMESPACE }}
      CHKP_CLOUDGUARD_ID: ${{ secrets.CHKP_CLOUDGUARD_ID }}
      CHKP_CLOUDGUARD_SECRET: ${{ secrets.CHKP_CLOUDGUARD_SECRET }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v1
      
    - name: ShiftLeft Web Application Code Scan
      run: |
            chmod +x shiftleft
            ./shiftleft code-scan -s .
      continue-on-error: true    
      
    - name: Build Docker Container
      run: |
         sudo docker build . -t michaelbraunbass/badwebapp
         
    - name: Smoke Test
      run: |
         sudo docker run -d -p 8080:8080 michaelbraunbass/badwebapp
         sleep 4
         curl localhost:8080
    
    - name: Shift Left Container Scan
      run: |
        docker save michaelbraunbass/badwebapp -o badwebapp.tar
        ./shiftleft image-scan -t 1800 -i ./badwebapp.tar
      continue-on-error: true
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
             
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: michaelbraunbass/testbadapp:latest
        
#    - name: Update K8 Cluster
#      run: |
#         az login  --service-principal -u ${AZURE_CLIENT_ID} -p ${AZURE_CLIENT_SECRET} -t ${AZURE_TENANT_ID}
#         az aks get-credentials --name ${K8_CLUSTERNAME} --resource-group ${AZ_RG}
#         num=$[ ( $RANDOM % 100 )  + 1 ]
#         kubectl patch deployment ${K8_DEPLOYMENT} -n $K8_NAMESPACE -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"${num}\"}}}}}"

         
